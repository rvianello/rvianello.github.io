<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>De lana caprina (Posts about RDKit)</title><link>https://rvianello.github.io/</link><description></description><atom:link href="https://rvianello.github.io/categories/rdkit.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:"&gt;Riccardo Vianello&lt;/a&gt; </copyright><lastBuildDate>Wed, 29 Dec 2021 20:18:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>About the RDKit/Postgres Ordered Substructure Search Problem</title><link>https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/</link><dc:creator>Riccardo Vianello</dc:creator><description>&lt;img alt="another unrelated image of a festive cat" class="align-left" src="https://rvianello.github.io/images/202112_t01.png"&gt;
&lt;p&gt;Last summer Richard Apodaca wrote a &lt;a class="reference external" href="https://depth-first.com/articles/2021/08/11/the-rdkit-postgres-ordered-substructure-search-problem/"&gt;blog post&lt;/a&gt;
about using the RDKit PostgreSQL cartridge to support substructure search queries, which included a detailed discussion of how the performances of the
same query could significantly degrade when the substructure match constraint was combined with an "order by" clause, referencing another column from
the same table.&lt;/p&gt;
&lt;p&gt;I couldn't find the time to actually read that post until much later, but during this break I finally found a moment to reproduce the reported
behavior, and also try to understand why it happens.&lt;/p&gt;
&lt;p&gt;Very conveniently, the original blog post includes a complete description of how the test database was configured. Maybe any random subset of compounds from
ChEMBL could also work, but the instructions still saved me some time, and helped ensure that my setup was reasonably similar &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#f0" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tests use a single table created with the statement below:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_16fdf6ba61474fa9a68a771cb5b72998-1" name="rest_code_16fdf6ba61474fa9a68a771cb5b72998-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_16fdf6ba61474fa9a68a771cb5b72998-2" name="rest_code_16fdf6ba61474fa9a68a771cb5b72998-2"&gt;&lt;/a&gt;                        &lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_16fdf6ba61474fa9a68a771cb5b72998-3" name="rest_code_16fdf6ba61474fa9a68a771cb5b72998-3"&gt;&lt;/a&gt;                        &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="nb"&gt;NUMERIC&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_16fdf6ba61474fa9a68a771cb5b72998-4" name="rest_code_16fdf6ba61474fa9a68a771cb5b72998-4"&gt;&lt;/a&gt;                        &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_16fdf6ba61474fa9a68a771cb5b72998-5" name="rest_code_16fdf6ba61474fa9a68a771cb5b72998-5"&gt;&lt;/a&gt;                    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;and filled with the molecule and molecular weight computed by the RDKit cartridge on the first 100000 &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#f1" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; records from the downloaded eMolecules dataset.
On this table, a gist index is created on the &lt;cite&gt;mol&lt;/cite&gt; column, and a regular btree index is created on the &lt;cite&gt;mw&lt;/cite&gt; column.&lt;/p&gt;
&lt;p&gt;The reference test query consists in selecting the molecules matching a search for a benzene/phenyl substructure, and returning the first 25 hits:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-1" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-2" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------------------------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-3" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                                                     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-4" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;---------------------------------------------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-5" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OCCCCl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;                                       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;184&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;666&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-6" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CCc1ccccc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;                              &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;275&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-7" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-8" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------------------------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-9" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;a id="rest_code_6c932023347b4c59b5f5e4491e50a3b0-10" name="rest_code_6c932023347b4c59b5f5e4491e50a3b0-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;011&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Searching for a very common substructure limits the ability for the gist index implementation to prune the search tree, and may therefore require the
query execution to scan a larger portion of the index to identify the matching rows in the table. But in this case, things are actually made easier by the
limit clause, because the index scan ends as soon as the first 25 matching records are found, which is likely to happen quite soon, exactly because phenyl
rings are so frequently present in many compounds.&lt;/p&gt;
&lt;p&gt;On the other hand, when a more selective query is performed, the index scan may happen to return a very small number of rows, and the query is again
quite fast:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-1" name="rest_code_a701d567db66420dac1d4de447bf5ba4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'C(=S)Cl'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-2" name="rest_code_a701d567db66420dac1d4de447bf5ba4-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-3" name="rest_code_a701d567db66420dac1d4de447bf5ba4-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-4" name="rest_code_a701d567db66420dac1d4de447bf5ba4-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-5" name="rest_code_a701d567db66420dac1d4de447bf5ba4-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;186&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;663&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-6" name="rest_code_a701d567db66420dac1d4de447bf5ba4-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-7" name="rest_code_a701d567db66420dac1d4de447bf5ba4-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_a701d567db66420dac1d4de447bf5ba4-8" name="rest_code_a701d567db66420dac1d4de447bf5ba4-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;008&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;But, even if substructure queries that include a limit clause tend to be less challenging, some problems become anyway apparent if an ordering clause
is added:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-1" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-2" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-3" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-4" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-5" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1cccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-6" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-7" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-8" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-9" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;a id="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-10" name="rest_code_b4d88f8082144b2dbc9e53cf4b7246bb-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;963&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Requiring the result records to be ordered by molecular weight made the same query almost 200x slower.&lt;/p&gt;
&lt;p&gt;I think the problem is that with the available table and indices, the query planner is confronted with two main options. It could either use the index on
the &lt;cite&gt;mw&lt;/cite&gt; column to scan the table in increasing molecular weight order, and explicitly check the query constraint &lt;cite&gt;mol@&amp;gt;'c1ccccc1'&lt;/cite&gt; to filter out the
undesired records one by one, or it could use the index on the &lt;cite&gt;mol&lt;/cite&gt; column to select the matching records, and then sort these records by molecular weight.&lt;/p&gt;
&lt;p&gt;Because the index on the &lt;cite&gt;mol&lt;/cite&gt; column has the potential for reducing the number of evaluated records, this is the plan that normally applies, as confirmed by
looking at the output from &lt;cite&gt;EXPLAIN ANALYZE&lt;/cite&gt;. The bottleneck, I think is not as much in whether the output records are efficiently sorted, but rather that for
a substructure query with a very poor selectivity (like &lt;cite&gt;c1ccccc1&lt;/cite&gt;), the index scan is required to process a very large fraction of the search tree associated
to the &lt;cite&gt;mol&lt;/cite&gt; column (in this specific case ~66K hits are initially selected from the index, about 2/3 of the overall data - a sequential scan of the
unindexed column would be probably faster).&lt;/p&gt;
&lt;p&gt;More selective queries can still perform fine also when the query includes the &lt;cite&gt;order by&lt;/cite&gt; query (the &lt;cite&gt;mol&lt;/cite&gt; index search tree is efficiently pruned,
and a small number of records is selected), but searching for very common substructures can be very inefficient, and the limit clause in this case doesn't
make things easier, because it only applies after the results are ordered.&lt;/p&gt;
&lt;p&gt;The suggested workaround of turning off the use of explicit sorting steps in the query planner can indeed help:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-1" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;enable_sort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-2" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-3" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-4" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-5" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-6" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-7" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-8" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1cccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-9" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-10" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-10"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-11" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;a id="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-12" name="rest_code_3b004b0197ee45a2b7d27d9e62c233f9-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;014&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;but I am afraid it could be just because in practice it prevents the planner from using the index on the &lt;cite&gt;mol&lt;/cite&gt; column, and not using this index may impact
negatively other queries that would normally show a high selectivity:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-1" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'C(=S)Cl'&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-2" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-3" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-4" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-5" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;186&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;663&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-6" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-7" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-8" name="rest_code_a5e6aeec527d420cb0d9097743b7c1c5-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;652&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;My impression is that one main limitation might be in the RDKit cartridge implementation, and more specifically in the selectivity estimation function
associated to the substructure operator &lt;cite&gt;@&amp;gt;&lt;/cite&gt;. If this function could return a better estimate of the selectivity associated to the given substructure query,
the query planner could make a better decision about whether to use the index and how (maybe an interesting project for the next year?).&lt;/p&gt;
&lt;p&gt;In the meantime, I think a two-column index &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#f2" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; could actually help the query planner leverage the information from both the &lt;cite&gt;mw&lt;/cite&gt; and &lt;cite&gt;mol&lt;/cite&gt; columns
at once.&lt;/p&gt;
&lt;p&gt;The PostgreSQL gist index implementation provides support for multi-column indices, but a suitable "operator class" is required to be available for the
indexed data types. The RDKit cartridge provides this operator class for the molecule, fingerprint and reaction data types it implements, and similarly,
the &lt;cite&gt;btree_gist&lt;/cite&gt; &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#f3" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; extension provides gist operator classes for most numerical types that are available for PostgreSQL.&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_1b930a9687ed41ed9c3a7cbd7791ab68-1" name="rest_code_1b930a9687ed41ed9c3a7cbd7791ab68-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;btree_gist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;However, in order to leverage the gist index in supporting the &lt;cite&gt;ORDER BY&lt;/cite&gt; query, we need to change the data type to use one whose operator class defines
the distance operator and function that are required for nearest neighbor queries. This operator (&lt;cite&gt;&amp;lt;-&amp;gt;&lt;/cite&gt;) is not implemented for the &lt;cite&gt;NUMERIC&lt;/cite&gt; data type &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#f4" id="footnote-reference-5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;5&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;,
but it's available for the other numerical primitive types, including the floating point ones:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_de0b6f8bd9e448f89aea40dc22980161-1" name="rest_code_de0b6f8bd9e448f89aea40dc22980161-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;TYPE&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This way, we can then create a combined gist index on both the &lt;cite&gt;mol&lt;/cite&gt; and &lt;cite&gt;mw&lt;/cite&gt; columns:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_a464291078ea4958aabc11c6fb6a0a47-1" name="rest_code_a464291078ea4958aabc11c6fb6a0a47-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;molecules_mol_mw&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And finally, a small change needs to apply to the executed query, in order to use the new index in the &lt;cite&gt;ORDER BY&lt;/cite&gt; clause:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-1" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-2" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-3" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;                     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-4" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------|&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-5" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1cccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-6" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-7" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-8" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------------+---------+&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-9" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;a id="rest_code_d04ff95eccc348729f9ca7f41ee01da1-10" name="rest_code_d04ff95eccc348729f9ca7f41ee01da1-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;013&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The output from &lt;cite&gt;EXPLAIN ANALYZE&lt;/cite&gt; may help confirm that the two-column index is actually used:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-1" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;ric&lt;/span&gt;&lt;span class="o"&gt;@/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;emolecules&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;ANALYZE&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="o"&gt;@&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-2" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-3" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;                                                                                                                              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-4" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------------------------------------------------------|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-5" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Limit&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;409&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;399&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;066&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                 &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-6" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;molecules_mol_mw&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;molecules&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;426&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;409&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;396&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;057&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-7" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="o"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'c1ccccc1'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                                            &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-8" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Order&lt;/span&gt; &lt;span class="k"&gt;By&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mw&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;real&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                                                    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-9" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-9"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;                                                                                                                 &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-10" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-10"&gt;&lt;/a&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;146&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;                                                                                                                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;a id="rest_code_a50c40c42ff44e43ad051e6d16ce5792-11" name="rest_code_a50c40c42ff44e43ad051e6d16ce5792-11"&gt;&lt;/a&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;aside class="footnote brackets" id="f0" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I was required to use a more current version of the eMolecules data (version 2021-07-01 is no longer available for download, so I used version
2022-01-01), and I also used PostgreSQL 14.1 from conda-forge, with a custom build of the RDKit cartridge (based on the current RDKit release
2021.09.3). I believe the slightly different configuration didn't introduce any significant difference compared to the original post.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The size of this test database is indeed small, but because the executed queries are limited to only select a small number of hits, it's
already sufficient to detect when there are any issues with the generated query plan. Also because this observation was in agreement with the
findings in the original post, I haven't spent a big amount of time exploring the dependencies from the database size, but a quick test with a
dataset about 10x larger provided about the same results.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The option of using a two-column index based on &lt;cite&gt;btree_gist&lt;/cite&gt; was also already considered in the original post, but for some reason it was
reported to be ineffective.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The &lt;cite&gt;btree_gist&lt;/cite&gt; extension is part of the PostgreSQL source code distribution and should be most often available with any installation.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/#footnote-reference-5"&gt;5&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;cite&gt;NUMERIC&lt;/cite&gt; is an arbitrary precision decimal data type. It's recommended for storing monetary amounts and other quantities where exactness
is required. I'm not sure its use for storing the molecular weight was anyway intended.&lt;/p&gt;
&lt;/aside&gt;</description><category>PostgreSQL</category><category>RDKit</category><guid>https://rvianello.github.io/posts/the-rdkitpostgres-ordered-substructure-search-problem/</guid><pubDate>Wed, 29 Dec 2021 10:55:06 GMT</pubDate></item><item><title>Extending ChEMBL with ChemicaLite (and of course RDKit)</title><link>https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/</link><dc:creator>Riccardo Vianello</dc:creator><description>&lt;p&gt;This blog post collects some draft notes about how to use &lt;a class="reference external" href="https://github.com/rvianello/chemicalite"&gt;ChemicaLite&lt;/a&gt;
to integrate some chemistry logic directly into the SQLite version of the &lt;a class="reference external" href="https://www.ebi.ac.uk/chembl/"&gt;ChEMBL&lt;/a&gt; database &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#f1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;aside class="admonition attention"&gt;
&lt;p class="admonition-title"&gt;Attention!&lt;/p&gt;
&lt;p&gt;This post is now quite old, the overall workflow is still informative, but several details in the ChemicaLite API have changed. Please consider
referring to the similar &lt;a class="reference external" href="https://github.com/rvianello/chemicalite/blob/master/examples/setup_chembl.sql"&gt;example&lt;/a&gt; script that is part of
the source code distribution, and in general to the documentation that is also available from
&lt;a class="reference external" href="https://chemicalite.readthedocs.io/en/latest/"&gt;Read the Docs&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;img alt="an unrelated image of a festive cat" class="align-right" src="https://rvianello.github.io/images/202012_t01.png"&gt;
&lt;pre class="code shell"&gt;&lt;a id="rest_code_430b5e3f18a746579ab85f4430a5c4b1-1" name="rest_code_430b5e3f18a746579ab85f4430a5c4b1-1"&gt;&lt;/a&gt;$ &lt;span class="c1"&gt;# you can download the ChEMBL database from ftp://ftp.ebi.ac.uk/pub/databases/chembl/ChEMBLdb/latest/&lt;/span&gt;
&lt;a id="rest_code_430b5e3f18a746579ab85f4430a5c4b1-2" name="rest_code_430b5e3f18a746579ab85f4430a5c4b1-2"&gt;&lt;/a&gt;$ tar xvf ./chembl_27_sqlite.tar.gz
&lt;/pre&gt;&lt;p&gt;At this time the easiest way (for linux and osx &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#f2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; users) to get ChemicaLite probably consists in installing the experimental
conda packages I uploaded to &lt;a class="reference external" href="https://anaconda.org/ric/chemicalite"&gt;anaconda.org&lt;/a&gt;, together with the RDKit package from
conda-forge.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a id="rest_code_f5fa5c51d76f4cd2bc3219362f7154c7-1" name="rest_code_f5fa5c51d76f4cd2bc3219362f7154c7-1"&gt;&lt;/a&gt;$ conda create -n chembl-chemicalite -c conda-forge -c ric/label/dev rdkit chemicalite
&lt;a id="rest_code_f5fa5c51d76f4cd2bc3219362f7154c7-2" name="rest_code_f5fa5c51d76f4cd2bc3219362f7154c7-2"&gt;&lt;/a&gt;$ . activate chembl-chemicalite
&lt;/pre&gt;&lt;p&gt;SQLite drivers exist for basically all programming languages and environments, but to keep things simple, I will just
use some SQL code interactively in the SQLite shell:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_15cb0e55ce32478790c0622dc3f058bf-1" name="rest_code_15cb0e55ce32478790c0622dc3f058bf-1"&gt;&lt;/a&gt;(chembl-chemicalite) $ sqlite3 ./chembl_27/chembl_27_sqlite/chembl_27.db
&lt;a id="rest_code_15cb0e55ce32478790c0622dc3f058bf-2" name="rest_code_15cb0e55ce32478790c0622dc3f058bf-2"&gt;&lt;/a&gt;SQLite version 3.34.0 2020-12-01 16:14:00
&lt;a id="rest_code_15cb0e55ce32478790c0622dc3f058bf-3" name="rest_code_15cb0e55ce32478790c0622dc3f058bf-3"&gt;&lt;/a&gt;Enter ".help" for usage hints.
&lt;a id="rest_code_15cb0e55ce32478790c0622dc3f058bf-4" name="rest_code_15cb0e55ce32478790c0622dc3f058bf-4"&gt;&lt;/a&gt;sqlite&amp;gt;
&lt;/pre&gt;&lt;p&gt;First, the ChemicaLite extension needs to be loaded (because the extension is provided as a runtime loadable module, this
operation is required on every new connection to the database, otherwise SQLite will complain that functions and types implemented
in the extension are not known/available). Please note that loading extensions is automatically enabled in
the SQLite shell. If you use a different driver or API, you may need to explicitly
&lt;a class="reference external" href="https://sqlite.org/loadext.html"&gt;enable this operation&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_450e8f59a48b44f089be15d5fc453822-1" name="rest_code_450e8f59a48b44f089be15d5fc453822-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="n"&gt;chemicalite&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;For reference (and to quickly smoke-test the loaded extension) one can briefly verify which versions of ChemicaLite and RDKit are
available:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_3ce93805d86f4d2aae25de0af7b3bedb-1" name="rest_code_3ce93805d86f4d2aae25de0af7b3bedb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;chemicalite_version&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rdkit_version&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_3ce93805d86f4d2aae25de0af7b3bedb-2" name="rest_code_3ce93805d86f4d2aae25de0af7b3bedb-2"&gt;&lt;/a&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Once the extension is loaded, bindings to the RDKit toolkit become available as SQL functions and it is for example
possible to compute molecular descriptors directly on the compounds in the ChEMBL tables. However, it is usually
convenient to permanently extend the database schema with a table of RDKit molecules:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_741673a40c704d488c57a49123d3bd1c-1" name="rest_code_741673a40c704d488c57a49123d3bd1c-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;molregno&lt;/span&gt; &lt;span class="nb"&gt;BIGINT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="n"&gt;MOL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_741673a40c704d488c57a49123d3bd1c-2" name="rest_code_741673a40c704d488c57a49123d3bd1c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canonical_smiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;compound_structures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This way chemical constraints (e.g. substructure searches) can be easily integrated in queries applying to the ChEMBL data:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-1" name="rest_code_cd8bb977782c43a883271891385d5b3b-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canonical_smiles&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-2" name="rest_code_cd8bb977782c43a883271891385d5b3b-2"&gt;&lt;/a&gt;   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compound_structures&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-3" name="rest_code_cd8bb977782c43a883271891385d5b3b-3"&gt;&lt;/a&gt;   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol_is_substruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-4" name="rest_code_cd8bb977782c43a883271891385d5b3b-4"&gt;&lt;/a&gt;   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-5" name="rest_code_cd8bb977782c43a883271891385d5b3b-5"&gt;&lt;/a&gt;&lt;span class="mi"&gt;9830&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Sc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CC2CCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C3CCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c4cnnc5ccccc45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CC3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CC2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-6" name="rest_code_cd8bb977782c43a883271891385d5b3b-6"&gt;&lt;/a&gt;&lt;span class="mi"&gt;37351&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1cccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Nc2ccc3nnccc3c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-7" name="rest_code_cd8bb977782c43a883271891385d5b3b-7"&gt;&lt;/a&gt;&lt;span class="mi"&gt;47898&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;COC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;nH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;c2c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc3c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c12&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;CCl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1cc2cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c4cc5c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc5nn4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ccc2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;N3C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-8" name="rest_code_cd8bb977782c43a883271891385d5b3b-8"&gt;&lt;/a&gt;&lt;span class="mi"&gt;62519&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;Cc1nnc2ccccc2c1NCCC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1ccccc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1ccccc1&lt;/span&gt;
&lt;a id="rest_code_cd8bb977782c43a883271891385d5b3b-9" name="rest_code_cd8bb977782c43a883271891385d5b3b-9"&gt;&lt;/a&gt;&lt;span class="mi"&gt;109577&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;CC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;Cc1ccccc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1cnnc2ccccc12&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code sql"&gt;&lt;a id="rest_code_a5191cab63f14cd69cef033bd2ac8acf-1" name="rest_code_a5191cab63f14cd69cef033bd2ac8acf-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol_is_substruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_a5191cab63f14cd69cef033bd2ac8acf-2" name="rest_code_a5191cab63f14cd69cef033bd2ac8acf-2"&gt;&lt;/a&gt;&lt;span class="mi"&gt;485&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The above queries are nice and simple, but without a proper (chemistry aware) index, the whole &lt;code class="docutils literal"&gt;rdkit_molecules&lt;/code&gt; table is
scanned sequentially, the substructure constraint is checked explicitly on every molecule, resulting in some poor performances.&lt;/p&gt;
&lt;p&gt;Differently from other database engines, SQLite doesn't support creating a custom index directly on the &lt;code class="docutils literal"&gt;mol&lt;/code&gt; column.
Instead, SQLite supports a &lt;a class="reference external" href="https://sqlite.org/vtab.html"&gt;virtual table&lt;/a&gt; mechanism, which allows wrapping the index data
structure with a table-like interface. This way, an indexed search can be performed by joining the queried column with the
virtual table that implements the index.&lt;/p&gt;
&lt;p&gt;ChemicaLite provides an &lt;code class="docutils literal"&gt;rdtree&lt;/code&gt; virtual table that implements an index structure for binary fingerprints. For
substructure queries, an index based on the &lt;code class="docutils literal"&gt;rdtree&lt;/code&gt; and the RDKit pattern fingerprint can be created with the following
two statements:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_5bd7ae61cb884946998d03d7f20514c2-1" name="rest_code_5bd7ae61cb884946998d03d7f20514c2-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;rdkit_struct_index&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;rdtree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;OPT_FOR_SUBSET_QUERIES&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5bd7ae61cb884946998d03d7f20514c2-2" name="rest_code_5bd7ae61cb884946998d03d7f20514c2-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;rdkit_struct_index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mol_bfp_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The example substructure queries above can be refactored to leverage this index table, which will allow them to run significantly
faster &lt;a class="footnote-reference brackets" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#f3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-1" name="rest_code_5705925ca5c14d3aac713bf58675c201-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-2" name="rest_code_5705925ca5c14d3aac713bf58675c201-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;rdkit_struct_index&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-3" name="rest_code_5705925ca5c14d3aac713bf58675c201-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;MATCH&lt;/span&gt; &lt;span class="n"&gt;rdtree_subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol_bfp_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-4" name="rest_code_5705925ca5c14d3aac713bf58675c201-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-5" name="rest_code_5705925ca5c14d3aac713bf58675c201-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canonical_smiles&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;compound_structures&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-6" name="rest_code_5705925ca5c14d3aac713bf58675c201-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol_is_substruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-7" name="rest_code_5705925ca5c14d3aac713bf58675c201-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-8" name="rest_code_5705925ca5c14d3aac713bf58675c201-8"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1216581&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1cnnc2ccccc12&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-9" name="rest_code_5705925ca5c14d3aac713bf58675c201-9"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1233534&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1cnnc2ccccc12&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-10" name="rest_code_5705925ca5c14d3aac713bf58675c201-10"&gt;&lt;/a&gt;&lt;span class="mi"&gt;947201&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1cc2c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cccc2nn1&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-11" name="rest_code_5705925ca5c14d3aac713bf58675c201-11"&gt;&lt;/a&gt;&lt;span class="mi"&gt;501513&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1cc2cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc2nn1&lt;/span&gt;
&lt;a id="rest_code_5705925ca5c14d3aac713bf58675c201-12" name="rest_code_5705925ca5c14d3aac713bf58675c201-12"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1295924&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]([&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;c1cccc2nnccc12&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code sql"&gt;&lt;a id="rest_code_3a2ebe5adb3843658375c7c639776944-1" name="rest_code_3a2ebe5adb3843658375c7c639776944-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt;
&lt;a id="rest_code_3a2ebe5adb3843658375c7c639776944-2" name="rest_code_3a2ebe5adb3843658375c7c639776944-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;rdkit_struct_index&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3a2ebe5adb3843658375c7c639776944-3" name="rest_code_3a2ebe5adb3843658375c7c639776944-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol_is_substruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3a2ebe5adb3843658375c7c639776944-4" name="rest_code_3a2ebe5adb3843658375c7c639776944-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;MATCH&lt;/span&gt; &lt;span class="n"&gt;rdtree_subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol_bfp_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c1cccc2c1nncc2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_3a2ebe5adb3843658375c7c639776944-5" name="rest_code_3a2ebe5adb3843658375c7c639776944-5"&gt;&lt;/a&gt;&lt;span class="mi"&gt;485&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Very similarly, an index can be created to support similarity queries, in this case using Morgan binary fingerprints:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;a id="rest_code_ca2dfd1ec1324b9eb8c8bb9f45fb3f56-1" name="rest_code_ca2dfd1ec1324b9eb8c8bb9f45fb3f56-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;rdkit_morgan_index&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;rdtree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;OPT_FOR_SIMILARITY_QUERIES&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_ca2dfd1ec1324b9eb8c8bb9f45fb3f56-2" name="rest_code_ca2dfd1ec1324b9eb8c8bb9f45fb3f56-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;rdkit_morgan_index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mol_morgan_bfp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;mol&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code sql"&gt;&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-1" name="rest_code_e151776e273c4b2f93e7b12773b276cf-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-2" name="rest_code_e151776e273c4b2f93e7b12773b276cf-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;rdkit_molecules&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;rdkit_morgan_index&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-3" name="rest_code_e151776e273c4b2f93e7b12773b276cf-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;MATCH&lt;/span&gt; &lt;span class="n"&gt;rdtree_tanimoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol_morgan_bfp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Cc1ccc2nc(-c3ccc(NC(C4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-4" name="rest_code_e151776e273c4b2f93e7b12773b276cf-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-5" name="rest_code_e151776e273c4b2f93e7b12773b276cf-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-6" name="rest_code_e151776e273c4b2f93e7b12773b276cf-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canonical_smiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-7" name="rest_code_e151776e273c4b2f93e7b12773b276cf-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;bfp_tanimoto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mol_morgan_bfp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Cc1ccc2nc(-c3ccc(NC(C4N(C(c5cccs5)=O)CCC4)=O)cc3)sc2c1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-8" name="rest_code_e151776e273c4b2f93e7b12773b276cf-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;compound_structures&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;molregno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-9" name="rest_code_e151776e273c4b2f93e7b12773b276cf-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-10" name="rest_code_e151776e273c4b2f93e7b12773b276cf-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-11" name="rest_code_e151776e273c4b2f93e7b12773b276cf-11"&gt;&lt;/a&gt;&lt;span class="mi"&gt;472512&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1ccc2nc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c3ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4CCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c5cccs5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CC4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sc2c1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;761194029850746&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-12" name="rest_code_e151776e273c4b2f93e7b12773b276cf-12"&gt;&lt;/a&gt;&lt;span class="mi"&gt;471317&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1ccc2nc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c3ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4CCCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c5cccs5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sc2c1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-13" name="rest_code_e151776e273c4b2f93e7b12773b276cf-13"&gt;&lt;/a&gt;&lt;span class="mi"&gt;471461&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1ccc2nc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c3ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4CCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c5cccs5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;CC4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sc2c1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;621621621621622&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-14" name="rest_code_e151776e273c4b2f93e7b12773b276cf-14"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1032469&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nc1nc2ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc2s1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;CCCN1C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c1cccs1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;614285714285714&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-15" name="rest_code_e151776e273c4b2f93e7b12773b276cf-15"&gt;&lt;/a&gt;&lt;span class="mi"&gt;471319&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1ccc2nc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c3ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4CCN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c5cccs5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sc2c1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;613333333333333&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-16" name="rest_code_e151776e273c4b2f93e7b12773b276cf-16"&gt;&lt;/a&gt;&lt;span class="mi"&gt;751668&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;COc1ccc2nc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;CCCN3C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c3cccs3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sc2c1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;611111111111111&lt;/span&gt;
&lt;a id="rest_code_e151776e273c4b2f93e7b12773b276cf-17" name="rest_code_e151776e273c4b2f93e7b12773b276cf-17"&gt;&lt;/a&gt;&lt;span class="mi"&gt;740754&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Cc1ccc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;C2CCCN2C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c2cccs2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;cc1C&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;606060606060606&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I collected the modifying queries from this post into a small script (please note that the script doesn't include
any error handling or graceful recovery from any error conditions):&lt;/p&gt;
&lt;script src="https://gist.github.com/87a6173b033c9ea0ee206a9a7b9bd042.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;-- This script was tested with ChEMBL 27, ChemicaLite 2020.12.5, RDKit 2020.09.3
-- (it may not work with any later releases)

-- Load the ChemicaLite extension
.load chemicalite

-- Create a table of RDKit molecules
CREATE TABLE rdkit_molecules(id INTEGER PRIMARY KEY, molregno BIGINT NOT NULL, mol MOL);
INSERT INTO rdkit_molecules (molregno, mol) SELECT molregno, mol(canonical_smiles) FROM compound_structures;

-- Create an index for substructure queries
CREATE VIRTUAL TABLE rdkit_struct_index USING rdtree(id, s bits(2048), OPT_FOR_SUBSET_QUERIES);
INSERT INTO rdkit_struct_index (id, s) SELECT id, mol_bfp_signature(mol, 2048) FROM rdkit_molecules WHERE mol IS NOT NULL;

-- Create an index for similarity queries
CREATE VIRTUAL TABLE rdkit_morgan_index USING rdtree(id, s bits(2048), OPT_FOR_SIMILARITY_QUERIES);
INSERT INTO rdkit_morgan_index (id, s) SELECT id, mol_morgan_bfp(mol, 2, 2048) FROM rdkit_molecules WHERE mol IS NOT NULL;

-- Exit the SQLite shell
.quit

&lt;/pre&gt;
&lt;/noscript&gt;&lt;p&gt;This script may take some time to execute (about 50' on my home laptop, more than a half of which apparently spent
computing and filling the SSS index). With the additional tables, the database file size (ignoring any storage temporarily used by SQLite
while applying the changes) grows by about 2 GB.&lt;/p&gt;
&lt;!-- rubric: Footnotes --&gt;
&lt;aside class="footnote brackets" id="f1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The attentive reader will notice that this post is late by almost
&lt;a class="reference external" href="http://chembl.blogspot.com/2016/03/chembl-db-on-sqlite-is-that-even.html"&gt;5 years&lt;/a&gt;. But better
late than never :-)&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;These packages are built using the &lt;a class="reference external" href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; infrastructure (thank you GitHub for
making it available). Please note that I am not an osx user, and the osx packages are only unit-tested as part of the build workflow.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;You may notice that the &lt;code class="docutils literal"&gt;compound_structures&lt;/code&gt; records returned by the &lt;cite&gt;LIMIT 5&lt;/cite&gt; clause do not match those from the earlier,
supposedly equivalent, example. This is because in this second query the ordering of the selected records is determined by the
traversal of the index tree. An additional &lt;cite&gt;ORDER BY molregno&lt;/cite&gt; clause would have ensured consistent results.&lt;/p&gt;
&lt;/aside&gt;</description><category>ChEMBL</category><category>ChemicaLite</category><category>RDKit</category><category>SQLite</category><guid>https://rvianello.github.io/posts/extending-chembl-with-chemicalite-and-of-course-rdkit/</guid><pubDate>Tue, 29 Dec 2020 20:42:33 GMT</pubDate></item></channel></rss>